#include <cmath>#include "header/bitmap_image.hpp"#include "header/complex.h"#define WIDTH     _W#define HEIGHT    _H#define FILE_PATH _F#define XCENTER   _X#define YCENTER   _Y#define ZOOM      _Zstruct color{    int r = 0;    int g = 0;    int b = 0;        color(int _r, int _g, int _g)    {        r = _r; g = _g; b = _b;    }};_Cint main(){    std::cout << "Creating image..." << std::endl;        bitmap_image image(WIDTH, HEIGHT);    double GR = (double) ZOOM / (WIDTH < HEIGHT ? WIDTH : HEIGHT);        std::cout << "Calculating...   0%"; std::cout.flush();    int PROGRESS;        for(int Y = 0;Y < HEIGHT;Y ++)    {        for(int X = 0;X < WIDTH;X ++)        {            complex c (                       XCENTER + GR * (double) (X * 2 - WIDTH),                       YCENTER + GR * (double) (Y * 2 - HEIGHT));                        COLOR = color(c);                        image.set_pixel(X, Y, COLOR.r % 256, COLOR.g % 256, COLOR.b % 256);        }                int PREPROGRESS = PROGRESS;        PROGRESS = (Y + 1) * 100 / HEIGHT;        if(PREPROGRESS != PROGRESS)        {            std::cout << "\b\b\b\b";            if(PROGRESS < 10) std::cout << ' '; if(PROGRESS < 100) std::cout << ' ';            std::cout << PROGRESS << '%'; std::cout.flush();        }    }        std::cout << std::endl << "Saving image..." << std::endl;    image.save_image(FILE_PATH);    std::cout << "Done!" << std::endl;        return 0;}
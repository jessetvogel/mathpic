#include <iostream>#include <fstream>#include <string>#include <sstream>using namespace std;#define OUTPUT_CPP "__OUPUT.CPP"#define TEMPLATE "template/template"#define NPOS string::nposint width = 512;int height = 512;double x = 0;double y = 0;double zoom =  2;string input_path;string file_path = "\"_\"";void usage(const char * argv[]){    cout << "Usage: " << argv[0] << " <source file> <output bmp file> [arguments]" << endl << endl;        cout << "Arguments:" << endl;    cout << "\t -w \t\t Width of image" << endl;    cout << "\t -h \t\t Height of image" << endl;    cout << "\t -x \t\t X coordinate of center of image" << endl;    cout << "\t -y \t\t Y coordinate of center of image" << endl;    cout << "\t -z \t\t Zoom level of the image" << endl;    }int main(int argc, const char * argv[]){    if(argc == 0) return 0;        // Usage    if(argc <= 2)    {        usage(argv);        return 0;    }        // Set variables    input_path = argv[1];    file_path.replace(1, 1, argv[2]);    for(int a = 2;a < argc - 1;a ++)    {        if(argv[a][0] == '-')        {            switch(argv[a][1])            {                case 'w': width = atoi(argv[a+1]); break;                case 'h': height = atoi(argv[a+1]); break;                case 'x': x = atof(argv[a+1]); break;                case 'y': y = atof(argv[a+1]); break;                case 'z': zoom = atof(argv[a+1]); break;            }        }    }        // Initialize streams    ifstream temp(TEMPLATE);    ifstream input(input_path);        if(!temp.is_open())    {        cout << "File missing: " TEMPLATE << endl;        return 0;    }        if(!input.is_open())    {        cout << "Could not find file: " << input_path << endl;        return 0;    }        ofstream output(OUTPUT_CPP);        // Initialize variables    int pos;    string line;    stringstream str;        // Get code    str << input.rdbuf();    string code = str.str();        // Read everything from template    while(getline(temp, line))    {        // Replace words from template        pos = line.find("_W");        if(pos != NPOS) line.replace(pos, 2, to_string(width));        pos = line.find("_H");        if(pos != NPOS) line.replace(pos, 2, to_string(height));                pos = line.find("_X");        if(pos != NPOS) line.replace(pos, 2, to_string(x));        pos = line.find("_Y");        if(pos != NPOS) line.replace(pos, 2, to_string(y));        pos = line.find("_Z");        if(pos != NPOS) line.replace(pos, 2, to_string(zoom));            pos = line.find("_F");        if(pos != NPOS) line.replace(pos, 2, file_path);                pos = line.find("_C");        if(pos != NPOS) line.replace(pos, 2, code);                // Write to output        output << line << endl;    }        // Close streams    temp.close();    input.close();    output.close();        // Execute file    system("g++ " OUTPUT_CPP " -o __; rm " OUTPUT_CPP "; ./__; rm __;");        return 0;}